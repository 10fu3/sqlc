// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query_multiple.sql

package db

import (
	"context"
	"database/sql"
)

const listPostsWithAuthorAndReviewer = `-- name: ListPostsWithAuthorAndReviewer :many
SELECT 
  p.id, 
  p.title, 
  p.body, 
  p.author_id,
  p.reviewer_id,
  a1.id, a1.name, a1.bio,
  a2.id, a2.name, a2.bio
FROM posts p
LEFT JOIN authors a1 ON a1.id = p.author_id
LEFT JOIN authors a2 ON a2.id = p.reviewer_id
`

type ListPostsWithAuthorAndReviewerRow struct {
	ID         int64
	Title      string
	Body       string
	AuthorID   sql.NullInt64
	ReviewerID sql.NullInt64
	Author     sql.Null[Author]
	Author_2   sql.Null[Author]
}

func (q *Queries) ListPostsWithAuthorAndReviewer(ctx context.Context) ([]ListPostsWithAuthorAndReviewerRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostsWithAuthorAndReviewer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsWithAuthorAndReviewerRow
	for rows.Next() {
		var i ListPostsWithAuthorAndReviewerRow
		var iEmbedAuthorID sql.NullInt64
		var iEmbedAuthorName sql.NullString
		var iEmbedAuthorBio sql.NullString
		var iEmbedAuthor_2ID sql.NullInt64
		var iEmbedAuthor_2Name sql.NullString
		var iEmbedAuthor_2Bio sql.NullString
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.AuthorID,
			&i.ReviewerID,
			&iEmbedAuthorID,
			&iEmbedAuthorName,
			&iEmbedAuthorBio,
			&iEmbedAuthor_2ID,
			&iEmbedAuthor_2Name,
			&iEmbedAuthor_2Bio,
		); err != nil {
			return nil, err
		}
		if iEmbedAuthorID.Valid {
			i.Author.Valid = true
			i.Author.V = Author{
				ID:   iEmbedAuthorID.Int64,
				Name: iEmbedAuthorName.String,
				Bio:  iEmbedAuthorBio,
			}
		}
		if iEmbedAuthor_2ID.Valid {
			i.Author_2.Valid = true
			i.Author_2.V = Author{
				ID:   iEmbedAuthor_2ID.Int64,
				Name: iEmbedAuthor_2Name.String,
				Bio:  iEmbedAuthor_2Bio,
			}
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
