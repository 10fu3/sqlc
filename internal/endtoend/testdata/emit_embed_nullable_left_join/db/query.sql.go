// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const listPostsWithAuthors = `-- name: ListPostsWithAuthors :many
SELECT p.id, p.title, p.body, p.author_id, p.reviewer_id, authors.id, authors.name, authors.bio
FROM posts p
LEFT JOIN authors ON authors.id = p.author_id
`

type ListPostsWithAuthorsRow struct {
	ID         int64
	Title      string
	Body       string
	AuthorID   sql.NullInt64
	ReviewerID sql.NullInt64
	Author     sql.Null[Author]
}

func (q *Queries) ListPostsWithAuthors(ctx context.Context) ([]ListPostsWithAuthorsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostsWithAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsWithAuthorsRow
	for rows.Next() {
		var i ListPostsWithAuthorsRow
		var iEmbedAuthorID sql.NullInt64
		var iEmbedAuthorName sql.NullString
		var iEmbedAuthorBio sql.NullString
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.AuthorID,
			&i.ReviewerID,
			&iEmbedAuthorID,
			&iEmbedAuthorName,
			&iEmbedAuthorBio,
		); err != nil {
			return nil, err
		}
		if iEmbedAuthorID.Valid {
			i.Author.Valid = true
			i.Author.V = Author{
				ID:   iEmbedAuthorID.Int64,
				Name: iEmbedAuthorName.String,
				Bio:  iEmbedAuthorBio,
			}
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
