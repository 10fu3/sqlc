// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const innerJoinBaseline = `-- name: InnerJoinBaseline :one
SELECT users.id, users.name, users.email, posts.id, posts.user_id, posts.title, posts.content
FROM users
INNER JOIN posts ON users.id = posts.user_id
WHERE users.id = $1
`

type InnerJoinBaselineRow struct {
	User User `db:"user" json:"user"`
	Post Post `db:"post" json:"post"`
}

func (q *Queries) InnerJoinBaseline(ctx context.Context, id int32) (InnerJoinBaselineRow, error) {
	row := q.db.QueryRow(ctx, innerJoinBaseline, id)
	var i InnerJoinBaselineRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Name,
		&i.User.Email,
		&i.Post.ID,
		&i.Post.UserID,
		&i.Post.Title,
		&i.Post.Content,
	)
	return i, err
}

const multipleLeftJoins = `-- name: MultipleLeftJoins :one
SELECT users.id, users.name, users.email, profiles.id, profiles.user_id, profiles.bio, profiles.avatar_url, posts.id, posts.user_id, posts.title, posts.content
FROM users
LEFT JOIN profiles ON users.id = profiles.user_id
LEFT JOIN posts ON users.id = posts.user_id
WHERE users.id = $1
`

type MultipleLeftJoinsRow struct {
	User    User           `db:"user" json:"user"`
	Profile Profile        `db:"profile" json:"profile"`
	Post    sql.Null[Post] `db:"post" json:"post"`
}

func (q *Queries) MultipleLeftJoins(ctx context.Context, id int32) (MultipleLeftJoinsRow, error) {
	row := q.db.QueryRow(ctx, multipleLeftJoins, id)
	var i MultipleLeftJoinsRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Name,
		&i.User.Email,
		&i.Profile.ID,
		&i.Profile.UserID,
		&i.Profile.Bio,
		&i.Profile.AvatarUrl,
		&i.Post.V.ID,
		&i.Post.V.UserID,
		&i.Post.V.Title,
		&i.Post.V.Content,
	)
	return i, err
}

const profileWithUser = `-- name: ProfileWithUser :one
SELECT profiles.id, profiles.user_id, profiles.bio, profiles.avatar_url, users.id, users.name, users.email
FROM profiles
RIGHT JOIN users ON profiles.user_id = users.id
WHERE profiles.id = $1
`

type ProfileWithUserRow struct {
	Profile sql.Null[Profile] `db:"profile" json:"profile"`
	User    User              `db:"user" json:"user"`
}

func (q *Queries) ProfileWithUser(ctx context.Context, id int32) (ProfileWithUserRow, error) {
	row := q.db.QueryRow(ctx, profileWithUser, id)
	var i ProfileWithUserRow
	err := row.Scan(
		&i.Profile.V.ID,
		&i.Profile.V.UserID,
		&i.Profile.V.Bio,
		&i.Profile.V.AvatarUrl,
		&i.User.ID,
		&i.User.Name,
		&i.User.Email,
	)
	return i, err
}

const userProfileFull = `-- name: UserProfileFull :one
SELECT users.id, users.name, users.email, profiles.id, profiles.user_id, profiles.bio, profiles.avatar_url
FROM users
FULL JOIN profiles ON users.id = profiles.user_id
WHERE users.id = $1
`

type UserProfileFullRow struct {
	User    sql.Null[User]    `db:"user" json:"user"`
	Profile sql.Null[Profile] `db:"profile" json:"profile"`
}

func (q *Queries) UserProfileFull(ctx context.Context, id int32) (UserProfileFullRow, error) {
	row := q.db.QueryRow(ctx, userProfileFull, id)
	var i UserProfileFullRow
	err := row.Scan(
		&i.User.V.ID,
		&i.User.V.Name,
		&i.User.V.Email,
		&i.Profile.V.ID,
		&i.Profile.V.UserID,
		&i.Profile.V.Bio,
		&i.Profile.V.AvatarUrl,
	)
	return i, err
}

const userWithPostsAndComments = `-- name: UserWithPostsAndComments :one
SELECT users.id, users.name, users.email, posts.id, posts.user_id, posts.title, posts.content, comments.id, comments.post_id, comments.content, comments.author_name
FROM users
INNER JOIN posts ON users.id = posts.user_id
LEFT JOIN comments ON posts.id = comments.post_id
WHERE users.id = $1
`

type UserWithPostsAndCommentsRow struct {
	User    User              `db:"user" json:"user"`
	Post    Post              `db:"post" json:"post"`
	Comment sql.Null[Comment] `db:"comment" json:"comment"`
}

func (q *Queries) UserWithPostsAndComments(ctx context.Context, id int32) (UserWithPostsAndCommentsRow, error) {
	row := q.db.QueryRow(ctx, userWithPostsAndComments, id)
	var i UserWithPostsAndCommentsRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Name,
		&i.User.Email,
		&i.Post.ID,
		&i.Post.UserID,
		&i.Post.Title,
		&i.Post.Content,
		&i.Comment.V.ID,
		&i.Comment.V.PostID,
		&i.Comment.V.Content,
		&i.Comment.V.AuthorName,
	)
	return i, err
}

const userWithProfile = `-- name: UserWithProfile :one
SELECT users.id, users.name, users.email, profiles.id, profiles.user_id, profiles.bio, profiles.avatar_url
FROM users
LEFT JOIN profiles ON users.id = profiles.user_id
WHERE users.id = $1
`

type UserWithProfileRow struct {
	User    User              `db:"user" json:"user"`
	Profile sql.Null[Profile] `db:"profile" json:"profile"`
}

func (q *Queries) UserWithProfile(ctx context.Context, id int32) (UserWithProfileRow, error) {
	row := q.db.QueryRow(ctx, userWithProfile, id)
	var i UserWithProfileRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Name,
		&i.User.Email,
		&i.Profile.V.ID,
		&i.Profile.V.UserID,
		&i.Profile.V.Bio,
		&i.Profile.V.AvatarUrl,
	)
	return i, err
}
